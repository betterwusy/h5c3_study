
/*
less中的语法：
    1.less文件无法被html文件直接引用，只能先编译成css再被引用
    2.css 中的注释，内容会被解析到 css文件中
    3.变量：在变量中可以存储一个任意的值
      语法: 
        @a:120 px;
        @b: #ff6700;
        @c:box6;
        @d:"../img";
        .@{c}{
            width:@a;
            background-color:@b;
            background-image:url("@{d}/1.jpg");
        }

        height: 300px;
        width: $height;

      - 使用变量时，如果直接使用，以"@变量名"形式使用;
          若作为类名/一部分值使用，则"@{变量名}"形式使用
      - 变量发生重名时，优先使用较近的，可在声明前就使用变量
        
    4.父类选择器
    .box1{
        .box2{
            color:red;
        }

        相当于选中.box1 > .box3
        > .box3{
            color:blue;
        }

        选中父类,即等于box1:hover
        &:hover{
        
        }
    }

    5.继承
        :extend() 对当前选择器拓展指定选择器的样式(选择器分组)
    .p1{
        height:200px;
        width:200px;
    }
    .p2:extend(.p1){
        color:red;
    }

    直接对指定样式进行引用，相当于复制  
    .p3{
        .p1();
    }


*/
// less中的单行注释，不会被解析到 css 文件中

@a:100px;

.box1{
    background-color: #bfa;
    width: @a;

    .box2{
        color: orange;

        height: 300px;
        width: $height;
    }

    .box3{
        font-style: 18px;

        .box4{
            border: 1px solid red;
        }
    }
}

// 4.父类选择器
.box1{
    .box2{
        color:red;
    }

    // 相当于选中.box1 > .box3
    > .box3{
        color:blue;
    }

    // 选中父类,即等于box1:hover
    &:hover{
        color:orange;
    }
}

// 5.继承
.p1{
    height:200px;
    width:200px;
}
// 相当于先p1,p2分组选择器，然后再另外选择p2添加内容
.p2:extend(.p1){
    color:red;
}
.p3{
    // 相当于复制了p1的内容
    .p1;
}

// 使用类选择器时可以在选择器后添加一个括号，
//  这时我们实际就创建了一个mixins
//     这个类选择器在 css中并不会出现
// p4的内容不会出现在 css 中
.p4(){
    width: 100px;
    height: 100px;
    background-color: #bfa;
}
.p5{
    .p4;
}